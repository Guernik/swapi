#!/usr/bin/env escript

%% -*- erlang -*-
%%! 


main(Args) when length(Args) =:= 2 ->
  code:add_path("deps/jiffy/_build/default/lib/jiffy/ebin"),
  start_inet_sll(),      
  %FilmList = get_film_list_for_chars(Args),
  %io:format("~p~n",[FilmList]);
  L = get_film_map_list(),
  io:format("~p~n",[L]);

main(_Args) ->
  usage().

usage() ->
  io:format("usage: swapi Character AnotherCharacter~n"),
  io:format("ie: swapi luke leia~n"),
  io:format("    swapi \"luke sky\" leia~n").


start_inet_sll() -> 
  inets:start(),
  ssl:start().

get_film_list_for_chars([CharA,CharB]) ->
  CharacterMapA = get_character(CharA),
  CharacterMapB = get_character(CharB),
  FilmIdListA = get_films_id_from_character_map(CharacterMapA),
  FilmIdListB = get_films_id_from_character_map(CharacterMapB),
  SetA = sets:from_list(FilmIdListA),
  SetB = sets:from_list(FilmIdListB),
  SetC = sets:intersection(SetA,SetB),
  sets:to_list(SetC).
  

get_films_id_from_character_map(CharacterMap) ->
  FilmUriList = maps:get(<<"films">>,CharacterMap),
  lists:map( fun(FilmUri) -> get_id_from_film_uri(FilmUri) end, FilmUriList).
  
  
get_id_from_film_uri(FilmUri) ->
  <<"https://swapi.co/api/films/",FullId/binary>> = FilmUri,  
  Id = lists:droplast(binary_to_list(FullId)),
  Id. 
  %% list_to_binary(Id).

%% request_character/1
%% 
get_character(CharacterName) ->
  {ok, Character} = do_swapi_co_search(people,CharacterName),
  JsonSearchResult = jiffy:decode(Character,[return_maps]),  
  Count = maps:get(<<"count">>,JsonSearchResult),
  treat_result(Count,JsonSearchResult,CharacterName).

treat_result(Count,JsonSearchResult,_CharName) when Count =:= 1 ->
  ResultList = maps:get(<<"results">>,JsonSearchResult),
  hd(ResultList);
  
treat_result(Count,_JsonSearchResult, CharName) when Count > 1 ->
  io:format("More than one posible character for the input ~p~n",[CharName]);

treat_result(Count,_JsonSearchResult, CharName) when Count =:=  0 ->  
  io:format("No Star Wars character found for ~p~n",[CharName]).


  
get_film_map_list() ->
      {ok,Films} = do_swapi_co_get_all_films(),
      SearchResult = jiffy:decode(Films,[return_maps]),
      JsonFilms = maps:get(<<"results">>,SearchResult),
      L = [get_title_id_map(X) || X <- JsonFilms],
      maps:from_list(L).
      %%lists:map( fun(JsonFilm) -> get_title_id_map(JsonFilm) end, JsonFilms).

      

get_title_id_map(Film) ->
    FilmUri = maps:get(<<"url">>,Film),    
    Id = get_id_from_film_uri(FilmUri),
    FilmTitle = maps:get(<<"title">>,Film),
    {Id,FilmTitle}.
  %get_title_id_map(Film, PrevMap) ->
  %  maps:






do_swapi_co_search(people,Who) ->
  EscapedWho = escape_spaces(Who),
  do_http_get_request([swapi_co_base_url(), <<"people/">>, <<"?search=">>, EscapedWho]).

%% More search functions can be added as needed, ie: do_swapi_co_search(films,WhichOne) ...


 do_swapi_co_get_all_films() ->
   do_http_get_request([swapi_co_base_url(), <<"films/">>]).


%% Make a syncronous http request and returns the 
%% resulting Body as a binary string.
do_http_get_request(Uri) ->
  Res = httpc:request(get, {Uri, []}, [], []),
    case Res of 
      {ok, {{_HttpVersion,200,_ReasonPhrase}, _Headers, Body}} ->
        {ok, list_to_binary(Body)};
    {error, Reason} -> 
        {error, Reason};
    _Else ->
        {error,<<"Invalid response from internal http client performing request.">>}
  end.
  

swapi_co_base_url() ->
  <<"http://swapi.co/api/">>.




escape_spaces(String) ->
  string:replace(String," ", "%20").

%% deep_get( [], Map ) -> Map;
%% deep_get( [H|T], Map) ->
%%  deep_get(T, maps:get(H,Map) ).



